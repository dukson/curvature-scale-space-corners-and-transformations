Lacking an app to keep these in, making a temporary file while
implementing...

=====================================================================
Story: Near optimization of SkylineExtractor's findClouds method.
 
    summary: findClouds needs to be changed to make it possible to
      find the best fitting or nearly best fitting combinations
      of color and contrast clauses.  The clauses are the conditional
      logic to learn whether a pixel is sky or not and hence added
      to the sky points (or not) in a BFS visitor pattern.
      
      findClouds is currently given a set of seed sky points
      and the original color image and gradient images from which
      it applies various color and contrast clauses to grow the
      seed sky points until they reach the skyline or close to the
      skyline.  
      findClouds needs to be refactored to also accept as arguments,
      the clauses and coefficients for the clauses.
      The SkylineExtractor may need additional changes to make sure
      that member variables don't change state upon running findClouds
      so it can be re-used with the same images and a fresh set of
      sky points, clauses, and clause coefficients.

      A fitness function is needed to estimate how close the result
      is to the expected result.
         This involves defining the skyline and sky points accurately
      for the tests.  The penalty for overrunning the skyline boundary
      should be very large.

      An algorithm is needed to use the fitness function to determine
      the next set of improved coefficients to be tried w/ findClouds.
      Because there are so many parameters, a gradient approach is 
      less appealing than a heuristic approach such as the 
      Nelder-Mead downhill simplex method, so will use that.

      A harness that accepts image files and runs the findClouds
      method over all of the possible combinations of clauses,
      called equations and uses the downhill simplex method to
      find the nearly best fitting or best fitting coefficients
      for each equation and test image is needed.

      A pattern of determining the best fitting coefficients 
      among each equation and test is needed within the harness.

      A means of making the expected results for the test images is
      needed.

    possible complications: 
       unknown existing bugs found in the process that may need to
          be fixed (usually not a problem, but have delayed better
          testing habits while exploring how to implement most of 
          this and related code.)
       some test images not yet included will require a change in 
          the methods preceding the use of findClouds to find the
          sky seed points.  those images are not included and the
          method doesn't exist yet, but the images could be included
          with guesstimated seed sky points given to findClouds 
          (but this would not be a robust long term solution).

      notes still in todo.txt should be moved here to create targets...

    time estimate: 
        minimum: 
        maximum: 

    amount of time used: 

    state of completion: 

    comments regarding state:

    comments:

---------------------------------------------------------------------
Task 1:
    goal: Create the expected sky-only masks from the test images to
          compare the results with.

    details:  
          This could be done by starting with the thresholding part of
          the SkylineExtractor algorithm and then correcting for binning
          and manually extracting the skyline to make a mask using a 
          tool like Gimp.

          requires making a class in tests directory to use the needed
          part of SkylineExtractor and read in and write images.

          Also needs a run target in the build script to run the class,
          but not as a regular part of tests.

   time estimate: 
       15 min + (16 * 15 min).  minimum = 4 hours, maximum 8 hours
  
   amount of time used:
       1 day

   state of completion: complete

   comments:
      re-opened to make very detailed corrections
              
---------------------------------------------------------------------
Task 2:
   goal:  Explore the parameters to be fit to identify the border.
          Use LDA to find the best separability and to see if there
          is a multiplicative relationship between variables.

   details:  
          For the skyline, making 2 sets of data points: those
          about 3 pixels above the skyline and those 1 pixel below
          in order to look at the contrast and color of
          the sky versus non-sky pixels.
          Note that the test image do not have images with sky at
          the bottom and foreground on the top of the image, so using
          the general y-3 and y+1 is fine.

          Parameters that appear to be the strongest changing at the
          skyline are contrast, hue and blue or red depending on
          whether the sky is blue or red.

          The properties to explore are constructed similarly to how 
          they are constructed during the growing of pixels in findClouds.
          For a sky pixel in which a neighbor is being tested for
          contrast and color which indicates that it is also sky
          or is a border skyline pixel, the property tested for 
          contrast is 
          ((average contrast of its neighbor sky pixels) 
              - (contrast of candidate pixel)) /
              (standard deviation of contrast in the neighbor sky pixels)
          where neighbors is defined as the surrounding 8 sky pixels or 
          surrounding 24.

   time estimate: roughly max of 2 days.
  
   amount of time used:
       2 days

   state of completion: complete

   comments:
       LDA shows that neither the blue nor the red are separable by
       the chosen features as a single global filter to apply to either
       any red sky image or any blue sky image.

       One can see in the images that there is a jump in contrast and
       in blue or red depending on sky color at the boundary of the
       skyline, but the amount of change in the contrast or color is
       not easily seen as a single constant coefficient times other 
       properties.  That's understandable as the sky illumination 
       from the sun and the subsequent color dependent illumination 
       of the foreground horizon is not a simple function of intensity 
       (or even exponential of the intensity or power of the intensity 
       because of multiple scatterings and the albedo (index of 
       refraction) of the foreground skyline).

       Therefore, the existing approach and its refinement in Task 3
       is the better way to proceed, though this can be revisited when
       refined features have been derived.

------------------------------------------------------------------------
Task 3:
    goal: Design the passing and use of the clause coefficients and 
       clauses.

    details:  
       findClouds needs to accept as arguments the coefficients of
       clauses and the clauses. 
       A complete clause can be:
           ((param1/param2)  LTorGT coeff)  where param2 can be a '1'

       It also needs a way of knowing that param1 is color_point - color_sky,
       for example.  the parameter number and the intended parameters
       will be hard wired into the method and documented.

       The logic needed should be possible as ANDs of the clauses, but
       there may be an OR needed for blue and red skies, for example, or
       cluster of logic to create filters.
    
       note that this isn't a constraint satisfaction problem because 
       the coefficients need to be determined and refined.

       A group of AND logic statements are set into an instance of the class:
       ANDedClauses:
          SKYCONDITIONAL[] skyConditional
          PARAM[] param1
          PARAM[] param2
          COMPARISON[] comp
          float[] coefficients
       representing for example:
          (((param1[i]/param2[i]) lt or gt coeff[i]) 
              && ((param1[i+1]/param2[i+1]) lt or gt coeff[i+1]))

       Then the adapted findClouds2 should ue disjunctive normal form logic to
       process the ANDedClauses[] from an array as 'OR's.

       The summary looks like this:
           if (is border pix)
               break
           else if (is border pix)
               break
           else if (is border pix)
               break
           a pixel making it to here looks like a sky pixel

    time estimate: max 3 days (including unanticipated changes)
  
    amount of time used: 2 days so far

    state of completion: in progress

    comments:
              
---------------------------------------------------------------------
Task 4:
    goal: implement the overloaded findClouds that accepts the clauses
          and coefficients.

    details:  
          copy findClouds to adapt the method to use the given clauses 
          and coefficients.

          write a simple test for the new method.

   time estimate: 
  
   amount of time used: half hour so far

   state of completion:

   comments:
              
---------------------------------------------------------------------
Task 5:
    goal: implement the harness to run findClouds over multiple images
          for all equations and return the best fitting coefficients.

    details:  

   time estimate: 
  
   amount of time used:

   state of completion:

   comments:
              
---------------------------------------------------------------------
Task 6:
    goal: find more test images, especially those described as current
          caveats that would need an alternate way of finding the seed
          sky points.

    details:  

   time estimate: 
  
   amount of time used:

   state of completion:

   comments:
              
